
pragma solidity ^0.8.20;

contract CompressedShader {
    string public data;

    constructor() {
        data = "const ARRAY_WIDTH=32;\nlet update;\nlet triggerRender;\nfunction fullScreenRender(canvasId, fragSrc){\nconst canvas=document.createElement('canvas');\ncanvas.style.width='100vw';\ncanvas.style.height='100vh';\ndocument.body.appendChild(canvas);\ncanvas.width=canvas.clientWidth*2;\ncanvas.height=canvas.clientHeight*2;\nconst gl=canvas.getContext('webgl')|| canvas.getContext('experimental-webgl');\nconst vertSrc=`\nattribute vec2 a_position;\nvoid main(){\ngl_Position=vec4(a_position, 0.0, 1.0);\n}\n`;\nfunction compileShader(a, b){\nconst s=gl.createShader(b);\ngl.shaderSource(s, a);\ngl.compileShader(s);\nreturn s;\n}\nfunction createProgram(vs, fs){\nconst p=gl.createProgram();\ngl.attachShader(p, vs);\ngl.attachShader(p, fs);\ngl.linkProgram(p);\nreturn p;\n}\nconst vertShader=compileShader(vertSrc, gl.VERTEX_SHADER);\nconst fragShader=compileShader(fragSrc, gl.FRAGMENT_SHADER);\nconst program=createProgram(vertShader, fragShader);\nconst uPrevFrameLocation=gl.getUniformLocation(program, 'u_prevFrame');\nfunction createFramebuffer(gl, width, height){\nconst framebuffer=gl.createFramebuffer();\ngl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\nconst texture=gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\ngl.bindTexture(gl.TEXTURE_2D, null);\ngl.bindFramebuffer(gl.FRAMEBUFFER, null);\nreturn { framebuffer, texture };\n}\nconst fb1=createFramebuffer(gl, canvas.width, canvas.height);\nconst fb2=createFramebuffer(gl, canvas.width, canvas.height);\ngl.useProgram(program);\nconst buffer=gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\ngl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]), gl.STATIC_DRAW);\nconst positionLocation=gl.getAttribLocation(program, \"a_position\");\ngl.enableVertexAttribArray(positionLocation);\ngl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\nlet currentFB=fb1;\nlet prevFB=fb2;\nfunction render(){\nupdateUniform(gl, program, \"width\", \"1f\", window.innerWidth);\nupdateUniform(gl, program, \"height\", \"1f\", window.innerHeight);\nupdateTextures(gl);\ngl.bindFramebuffer(gl.FRAMEBUFFER, currentFB.framebuffer);\ngl.useProgram(program);\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\ngl.activeTexture(gl.TEXTURE1);\ngl.bindTexture(gl.TEXTURE_2D, prevFB.texture);\ngl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\nupdateTextures(gl);\ngl.bindFramebuffer(gl.FRAMEBUFFER, null);\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\ngl.activeTexture(gl.TEXTURE1);\ngl.bindTexture(gl.TEXTURE_2D, currentFB.texture);\ngl.uniform1i(uPrevFrameLocation, 1);\ngl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\nconst temp=currentFB;\ncurrentFB=prevFB;\nprevFB=temp;\n}\ntriggerRender=render;\ngl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\nreturn {gl, program, render, canvas};\n}\nwindow.onload =()=> {\nsetTimeout(()=> {\ninitShader();\n}, 1000);\nif(window.parent && document.referrer){\n var sourceURL=document.referrer;\n window.parent.postMessage(\"ready\", sourceURL);\n}\nconst button=document.getElementById(\"playButton\")\nlet id=0;\nwindow.addEventListener(\"click\",()=> {\ngenerateMusic();\n});\nwindow.addEventListener(\"touchstart\",()=> {\ngenerateMusic();\n});\nwindow.addEventListener(\"mousemove\",()=> {\nif(!isPlaying){\nbutton.style.opacity=1;\nreturn;\n}\nlet _id=++id;\nbutton.style.opacity=1;\nsetTimeout(()=> {\nif(_id !== id){\nreturn;\n}\nbutton.style.opacity=0;\n}, 1000);\n});\n}\n\nconst initShader=async function(){\nconst fragSrc=`\nprecision mediump float;\nuniform sampler2D texture_list; \nuniform float phase; \nuniform float kickEnv; \nuniform float iframe; \nuniform float width; \nuniform float height; \nuniform float offset_v; \nuniform sampler2D u_prevFrame;\nvec3 mod289(vec3 x){\nreturn x - floor(x *(1.0 / 289.0))* 289.0;\n}\nvec4 mod289_4(vec4 x){\nreturn x - floor(x *(1.0 / 289.0))* 289.0; \n}\nvec4 permute(vec4 x){\nreturn mod289_4(((x*34.0)+1.0)*x);\n}\nvec4 taylorInvSqrt(vec4 r){\nreturn 1.79284291400159 - 0.85373472095314 * r; \n}\nvec3 fade(vec3 t){\nreturn t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nfloat perlin(vec3 P){\nvec3 i0=mod289(floor(P)), i1=mod289(i0 + vec3(1.0));\nvec3 f0=fract(P), f1=f0 - vec3(1.0), f=fade(f0);\nvec4 ix=vec4(i0.x, i1.x, i0.x, i1.x), iy=vec4(i0.yy, i1.yy);\nvec4 iz0=i0.zzzz, iz1=i1.zzzz;\nvec4 ixy=permute(permute(ix)+ iy), ixy0=permute(ixy + iz0), ixy1=permute(ixy + iz1);\nvec4 gx0=ixy0 *(1.0 / 7.0), gy0=fract(floor(gx0)*(1.0 / 7.0))- 0.5;\nvec4 gx1=ixy1 *(1.0 / 7.0), gy1=fract(floor(gx1)*(1.0 / 7.0))- 0.5;\ngx0=fract(gx0); gx1=fract(gx1);\nvec4 gz0=vec4(0.5)- abs(gx0)- abs(gy0), sz0=step(gz0, vec4(0.0));\nvec4 gz1=vec4(0.5)- abs(gx1)- abs(gy1), sz1=step(gz1, vec4(0.0));\ngx0 -= sz0 *(step(0.0, gx0)- 0.5); gy0 -= sz0 *(step(0.0, gy0)- 0.5);\ngx1 -= sz1 *(step(0.0, gx1)- 0.5); gy1 -= sz1 *(step(0.0, gy1)- 0.5);\nvec3 g0=vec3(gx0.x,gy0.x,gz0.x), g1=vec3(gx0.y,gy0.y,gz0.y),g2=vec3(gx0.z,gy0.z,gz0.z), g3=vec3(gx0.w,gy0.w,gz0.w),g4=vec3(gx1.x,gy1.x,gz1.x), g5=vec3(gx1.y,gy1.y,gz1.y),g6=vec3(gx1.z,gy1.z,gz1.z), g7=vec3(gx1.w,gy1.w,gz1.w);\nvec4 norm0=taylorInvSqrt(vec4(dot(g0,g0), dot(g2,g2), dot(g1,g1), dot(g3,g3)));\nvec4 norm1=taylorInvSqrt(vec4(dot(g4,g4), dot(g6,g6), dot(g5,g5), dot(g7,g7)));\ng0 *= norm0.x; g2 *= norm0.y; g1 *= norm0.z; g3 *= norm0.w;\ng4 *= norm1.x; g6 *= norm1.y; g5 *= norm1.z; g7 *= norm1.w;\nvec4 nz=mix(vec4(dot(g0, vec3(f0.x, f0.y, f0.z)), dot(g1, vec3(f1.x, f0.y, f0.z)),dot(g2, vec3(f0.x, f1.y, f0.z)), dot(g3, vec3(f1.x, f1.y, f0.z))),vec4(dot(g4, vec3(f0.x, f0.y, f1.z)), dot(g5, vec3(f1.x, f0.y, f1.z)),dot(g6, vec3(f0.x, f1.y, f1.z)), dot(g7, vec3(f1.x, f1.y, f1.z))), f.z);\nreturn 2.2 * mix(mix(nz.x,nz.z,f.y), mix(nz.y,nz.w,f.y), f.x);\n}\nvoid main(){\nvec2 nuv =((gl_FragCoord.xy/vec2(width, height))/2.0);\nvec4 color_4782997793084631972f485004eb2180=vec4(${color1})/255.0; \nvec4 color_9b0337369e8340da89026ec1d129aa23=vec4(${color2})/255.0;\nvec4 color_354655dfd4104c1992d41f9aa44ec9ca=vec4(${color3})/255.0;\nvec2 bad_uv =(1.0*gl_FragCoord.xy-vec2(width, height))/height+vec2(0.0, offset_v);\nvec2 pix =((1.0/vec2(width, height))/2.0);\nvec2 off=vec2(0.0, ${yRate}*phase/height);\nvec2 floored_uv=floor((((bad_uv + 1.000))/(2.000))*(${gridSize}));\nfloat x_comp=floored_uv.r;\nfloat y_comp=floored_uv.g;\nfloat perlin_out=perlin(((vec3(x_comp,((floor((((bad_uv + 1.000))/(2.000))*(${gridSize}))).g), phase)))*(0.250));\nfloat gridSample =(((((texture2D((texture_list),(vec2((floor((x_comp +((floored_uv.g))*(${gridSize}))))/(pow(${gridSize}, 2.000)), 0.0))))).r))*(2.000));\nfloat mixture=mix(0.854, 1.000, gridSample-(1.000));\nfloat modded=mod((gridSample -(1.000))*(perlin_out), 1.000);\nfloat mixFactor =(mod((gridSample -(1.000))*(perlin(((vec3(x_comp, y_comp, phase)))*((0.25+kickEnv/4.0)*0.250))), 1.000))*(0.861);\nvec4 lastFrame=texture2D(u_prevFrame, nuv);\nvec4 color=mix((texture2D((u_prevFrame),(((nuv)*(1.000)+ off+vec2(((((((texture2D((texture_list),(vec2((floor((x_comp + y_comp *(${gridSize}))))/(pow(${gridSize}, 2.000)), 0.0))))).r))*(2.000))-(1.000))*(((pix.x))*(32.000)), 0.0))))), mix(color_4782997793084631972f485004eb2180, mix(color_9b0337369e8340da89026ec1d129aa23, color_354655dfd4104c1992d41f9aa44ec9ca, gridSample -(1.000)),(((abs((((fract(((((bad_uv + 1.000))/(2.000)+ perlin_out))*(${gridSize}))).r))-(0.500))<((${crossSize})*((mixture +(1.000 - mixture)*(kickEnv - 0.0)/(1.000 - 0.0)+ 0.100)))*(modded))&&(abs((((fract(((((bad_uv + 1.000))/(2.000)+ perlin_out))*(${gridSize}))).g))-(0.500))<((${crossSize})*((mixture +(1.000 - mixture)*(kickEnv - 0.0)/(1.000 - 0.0)+ 0.100)))*(modded)))? \n1.000 : \n0.0)), mixFactor);\ngl_FragColor= mix(lastFrame, color, 2.0*mixFactor);\n}\n`;\nlet {gl, program, render, canvas}=fullScreenRender('canvas', fragSrc);\nupdateUniform(gl, program, \"width\", \"1f\", window.innerWidth);\nupdateUniform(gl, program, \"height\", \"1f\", window.innerHeight);\narray=new Uint8Array(32);\nfor(let i=0; i < array.length; i++){\narray[i]=255;\n}\ntexture1=createTexture(gl, array, ARRAY_WIDTH, 1);\nsampler1=gl.getUniformLocation(program, \"texture_list\");\ngl.activeTexture(gl.TEXTURE0);// Use texture unit 1\ngl.bindTexture(gl.TEXTURE_2D, texture1);\ngl.uniform1i(sampler1, 0);// Tell the shader to use texture unit 0\nrender();\nupdate =(name, value)=> {\nupdateUniform(gl, program, name, \"1f\", value);\n};\nwindow.addEventListener('resize',()=> {\ncanvas.width=canvas.clientWidth * 2;\ncanvas.height=canvas.clientHeight * 2;\n render();\n});\n}\nconst updateTextures =(gl)=> {\nupdateTexture(gl, array, texture1, sampler1, gl.TEXTURE0, 0);\n};\nconst updateTexture =(gl, typedArray, texture, samplerUniform, _textureUnit, textureUnitNum)=> {\ngl.activeTexture(_textureUnit);\ngl.bindTexture(gl.TEXTURE_2D, texture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, ARRAY_WIDTH, 1, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, typedArray);\ngl.uniform1i(samplerUniform, textureUnitNum);\n};\nlet array, texture1, ssampler1;\n\nfunction createTexture(gl, data, width, height){\nconst texture=gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, data);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\nreturn texture;\n}\nconst updatePhase =(number)=> {\nupdate(\"phase\", number);\n};\nconst updateBit =(int)=> {\nlet bits=[];\nfor(let i=7; i >= 0; i--){\nlet bit =(int &(1 << i))? 1 : 0;\nbits.push(bit);\n}\nfor(let i=0; i < array.length; i++){\nconst bit=bits[Math.floor(i/4)];\narray[i]=bit ? 255 : 127;\n}\ntriggerRender();\nreturn bits;\n};\nfunction updateUniform(gl, program, name, type, value){\nconst location=gl.getUniformLocation(program, name);\nif(type === '1f')gl.uniform1f(location, value);\n}\n\n";
    }

    function getData() public view returns  (string memory) {
        return data;
    }
}
